/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package co.com.mypoint.experience.controller;

import co.com.mypoint.experience.domain.Place;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2018-09-28T20:31:26.708Z")

@Api(value = "place", description = "the place API")
public interface PlaceApi {

    @ApiOperation(value = "Nuevo lugar", nickname = "addPlace", notes = "Agregar nuevo lugar", authorizations = {
        @Authorization(value = "petstore_auth", scopes = {
            @AuthorizationScope(scope = "write:pets", description = "modify experience in your account"),
            @AuthorizationScope(scope = "read:pets", description = "read your experience")
            })
    }, tags={ "place", })
    @ApiResponses(value = { 
        @ApiResponse(code = 405, message = "Invalid input") })
    @RequestMapping(value = "/place",
        produces = { "application/xml; charset=utf-8", "application/json; charset=utf-8" }, 
        consumes = { "application/json; charset=utf-8", "application/xml; charset=utf-8" },
        method = RequestMethod.POST)
    ResponseEntity<Void> addPlace(@ApiParam(value = "Objecto place que será agregado", required = true) @Valid @RequestBody Place body);


    @ApiOperation(value = "Lista los lugares", nickname = "listPlace", notes = "Lista los lugares", response = Place.class, responseContainer = "List", tags={ "place", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Place.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Invalid status value"),
        @ApiResponse(code = 401, message = "Unauthorized user") })
    @RequestMapping(value = "/place",
        produces = { "application/json; charset=utf-8", "application/xml; charset=utf-8" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Place>> listPlace(@ApiParam(value = "Nombre") @Valid @RequestParam(value = "name", required = false) String name);


    @ApiOperation(value = "Actualiza lugar", nickname = "updatePlace", notes = "Actualiza un lugar", authorizations = {
        @Authorization(value = "petstore_auth", scopes = {
            @AuthorizationScope(scope = "write:pets", description = "modify experience in your account"),
            @AuthorizationScope(scope = "read:pets", description = "read your experience")
            })
    }, tags={ "place", })
    @ApiResponses(value = { 
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Experiencia not found"),
        @ApiResponse(code = 405, message = "Validation exception") })
    @RequestMapping(value = "/place",
        produces = { "application/xml; charset=utf-8", "application/json; charset=utf-8" }, 
        consumes = { "application/json; charset=utf-8", "application/xml; charset=utf-8" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> updatePlace(@ApiParam(value = "Objecto lugar que será actualizado", required = true) @Valid @RequestBody Place body);

}
